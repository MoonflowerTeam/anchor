plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

loom {
    forge {
        mixinConfigs "${project.mod_id}-common.mixins.json"

        dataGen {
            mod project.mod_id
        }
    }

    runs {
        data {
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

sourceSets.main.resources {
    srcDir file("src/generated/resources")
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.architectury.minecraft}-${rootProject.forge_version}"
    modImplementation("gg.moonflower:pollen-forge:${rootProject.pollen_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "id", rootProject.mod_id
    inputs.property "name", rootProject.mod_name
    inputs.property "version", rootProject.mod_version
    inputs.property "repo", rootProject.name

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand "id": rootProject.mod_id,
                "name": rootProject.mod_name,
                "version": rootProject.mod_version,
                "repo": rootProject.name
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    exclude "${rootProject.mod_id}-common.accesswidener"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "${rootProject.mod_id}.accessWidener"
            }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $rootProject.supported_version] $rootProject.mod_name $rootProject.mod_version"
        gameVersions = ["$rootProject.minecraft_version"]
        gameLoaders = ["forge"]
        changelog = createChangelog()
        mainPublication tasks.remapJar
        relations {
            depends {
                curseforge = "pollen"
                modrinth = "pollen"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                releaseType = "beta"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$rootProject.mod_version+$project.name-$rootProject.minecraft_version"
                releaseType = "release"
            }
        }
    }
}